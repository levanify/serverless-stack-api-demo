service: notes-app-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variable

provider:
  name: aws
  runtime: nodejs10.x
  stage: prod
  region: us-east-1

  # There environment variables are made available to our functions under process.env
  environment:
    tableName: notes

  # 'iamRoleStatements" defines the permission policy for the Lambda function
  # In this case Lambda functions are granted with permissions to access DynamoDB
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  # defines the HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross domain api call
  # - authorizer: authenticate using the AWS IAM role
  create: # add create function to the configuration
    handler: create.main
    events:
      - http:
          path: notes # at the /notes endpoint
          method: post  # handles post request
          cors: true  # because our front-end is being served from a different domain
          authorizer: aws_iam
  get:
    handler: get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam
